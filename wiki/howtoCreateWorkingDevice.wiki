#summary Creating a real device with the use of this project.
#labels AVR

= Introduction =

This page is supposed to explain how one should use information, this project offers, to create a real device. 

Building an instance of this device is divided into steps.

= Steps =

== Look at how it has been done ==

There exists a working instance of the device, created in year 2009. The device 
has been implemented in technics, described as "in solder this, connect with a wire to that, connect again, solder in that small thing, ...., find yourself in a pile of wires".

However, it works. The only trouble has been screening the sensetive digital part of the device from electromagnetic surges. Without proper protection, there have been problems with:
 * GSM mobile phone, sending data near
 * house refrigerator, starting to operate
 * Aquarium tube lamp, starting itself with a discharge
In that particular case, the problems seem to have been solved with shielding sensetive part of the device (everything, except relays and power supply) with 2-4 layers of household aluminium foil.

The photographies of the device can be seen in SVN trunk in photos/ directory: http://code.google.com/p/aquarium-avr-controller/source/browse/#svn/trunk/photos.

== Choose hardware ==
One, willing to construct the device, apart from basic elements (resistors, capacitors,...) would need:
 * ATMega16L microcontroller. Note the letter L - it means low voltage. This Î¼ is able to operate over 2.7..5.5 V diapason.
 * DS1621 thermometer chip.
 * WH0802A-YGH-CT - LCD display. This one's codepage holds Cyrrilics, Latin and some strange symbols. I believe, that such device, localised for other languages, would have it's Latin codepage part overlapping with this one.
 * 5 V power adapter, strong enough to give current to relays.
 * 3 electromagnetic relays. The scheme may be, of cause, modified so that to replace electromagnetic (power-inefficient!) relays with optoelectronics.
 * Some 2N7002 mosfet transistors
 * Some BAT54C Schottky diodes (this comes in pairs in small SMD packs, so you may consider choosing something else)
 * 32768 Hz clock resonator with 3-30 pf variable capacitor
 * 5v self-beeping beeper (beeps on constant voltage)
Everything, that exists on schemas, but is not mentioned here, is considered to be "basic" :P.

== Assemble hardware ==

Doing so manually is a difficult job (I guarantee this!). However, difficulty is relative.

In this section I would like to remind that "informational" part of this device needs proper screening. 

Assembling thermometer is worth discussing. 

TWI bus is used to communicate to the chip, lines are pulled up with 10k resistors, operation frequency is set to 770 Hz (See code of function configure_mu() in aquarium.c and Atmel datasheet for ATMega16L, page 176). This limits wire capacity: r (wire capacity) << 1/(770) s. Of cause, the fact that wire capacity is not too big can be tested practically by choosing a random piece of wire and seeing, whether thermometer and microcontroller can communicate.

To make the construction waterproof, I suggest using a glass tube with one side open (that's not, what I have - I have a jar, it can bee seen on photos). The idea is to put DS1621 chip there and to fill the tube with paraffin. 
 
== Upload firmware ==
There are many ways to program AVR chips, any can be used. This device schematics, however, is designed for use with "dapa" programmer. Dapa is very simple: some wires with resistors, connected to computer LPT port. Dapa circuit is among the other in project files. If you plan to use another programmer, change programming socket schema so that only microcontroller RESET resistor is left (the problem is that programming socket is combined with a resistor, that pulls RESET up).

Programming involves two steps:
 * Set fuse bytes: Fuse Low Byte = 0xa1, Fuse High Byte = 0xd9 
 * upload firmware from file aquarium.hex 

In case of using a Linux box with lpt-attached dapa the commands to perform these operations would be:
{{{
    sudo -u lp uisp -dprog=dapa --wr_fuse_l=161 --wr_fuse_h=217
    sudo -u lp uisp -dprog=dapa --erase
    sudo -u lp uisp -dprog=dapa --upload if=aquarium.hex
}}}

After uploading firmware the device shall start operating with clock set to 12:00:00. DS1621 thermometer flash internal parameters are checked at startup and fixed, if it is necessary. Upon changing something in user interface, configuration is backed up to EEPROM, so that if microcontroller gets reset (electromagnetic surge, power-off with bad internal back-up battery), only time will need adjusting.