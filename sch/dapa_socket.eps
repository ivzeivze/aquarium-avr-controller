%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 20081231
%%CreationDate: Thu Dec 10 03:34:32 2009
%%Title: /home/ivze/prog/aquarium/aquarium-avr-controller/sch/dapa_socket.sch
%%Author: ivze
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 260.000000 [(DAPA ) (programmator socket) () ] 0 49500 40700 138.888885 text
grestore
gsave
47700 43600 48000 43600 10 line
gsave
false true false false 208.000000 [(16) ] 0 47900 43650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD2 \(INT0\)) ] 0 48050 43600 111.111115 text
grestore
48055 46565 48555 46565 10 line
47700 44000 48000 44000 10 line
gsave
false true false false 208.000000 [(15) ] 0 47900 44050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD1 \(TXD\)) ] 0 48050 44000 111.111115 text
grestore
47700 44400 48000 44400 10 line
gsave
false true false false 208.000000 [(14) ] 0 47900 44450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD0 \(RXD\)) ] 0 48050 44400 111.111115 text
grestore
47700 44800 48000 44800 10 line
gsave
false true false false 208.000000 [(13) ] 0 47900 44850 111.111115 text
grestore
gsave
false false false false 208.000000 [(XTAL1) ] 0 48050 44800 111.111115 text
grestore
47700 45200 48000 45200 10 line
gsave
false true false false 208.000000 [(12) ] 0 47900 45250 111.111115 text
grestore
gsave
false false false false 208.000000 [(XTAL2) ] 0 48050 45200 111.111115 text
grestore
47700 45600 48000 45600 10 line
gsave
false false false false 208.000000 [(GND) ] 0 48050 45600 111.111115 text
grestore
gsave
false false false false 260.000000 [(11) ] 0 47744 45609 138.888885 text
grestore
47700 46000 48000 46000 10 line
gsave
false true false false 208.000000 [(10) ] 0 47900 46050 111.111115 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 48050 46000 111.111115 text
grestore
47700 46800 48000 46800 10 line
gsave
false true false false 208.000000 [(8) ] 0 47900 46850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB7 \(SCK\)) ] 0 48050 46800 111.111115 text
grestore
47700 47200 48000 47200 10 line
gsave
false true false false 208.000000 [(7) ] 0 47900 47250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB6 \(MISO\)) ] 0 48050 47200 111.111115 text
grestore
47700 47600 48000 47600 10 line
gsave
false true false false 208.000000 [(6) ] 0 47900 47650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB5 \(MOSI\)) ] 0 48050 47600 111.111115 text
grestore
47700 48000 48000 48000 10 line
gsave
false true false false 208.000000 [(5) ] 0 47900 48050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB4 \(SS\)) ] 0 48050 48000 111.111115 text
grestore
48462 48124 48662 48124 10 line
47700 48400 48000 48400 10 line
gsave
false true false false 208.000000 [(4) ] 0 47900 48450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB3 \(OC0/AIN1\)) ] 0 48050 48400 111.111115 text
grestore
47700 48800 48000 48800 10 line
gsave
false true false false 208.000000 [(3) ] 0 47900 48850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB2 \(INT2/AIN0\)) ] 0 48050 48800 111.111115 text
grestore
47700 49200 48000 49200 10 line
gsave
false true false false 208.000000 [(2) ] 0 47900 49250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB1 \(T1\)) ] 0 48050 49200 111.111115 text
grestore
47700 49600 48000 49600 10 line
gsave
false true false false 208.000000 [(1) ] 0 47900 49650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB0 \(XCK/T0\)) ] 0 48050 49600 111.111115 text
grestore
50900 42000 50600 42000 10 line
gsave
false false false false 208.000000 [(21) ] 0 50700 42050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(OC2\) PD7) ] 0 50550 42000 111.111115 text
grestore
50900 42400 50600 42400 10 line
gsave
false false false false 208.000000 [(22) ] 0 50700 42450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SCL\) PC0) ] 0 50550 42400 111.111115 text
grestore
50900 42800 50600 42800 10 line
gsave
false false false false 208.000000 [(23) ] 0 50700 42850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SDA\) PC1) ] 0 50550 42800 111.111115 text
grestore
50900 46800 50600 46800 10 line
gsave
false false false false 208.000000 [(33) ] 0 50700 46850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD7\) PA7) ] 0 50550 46800 111.111115 text
grestore
50900 47200 50600 47200 10 line
gsave
false false false false 208.000000 [(34) ] 0 50700 47250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD6\) PA6) ] 0 50550 47200 111.111115 text
grestore
50900 47600 50600 47600 10 line
gsave
false false false false 208.000000 [(35) ] 0 50700 47650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD5\) PA5) ] 0 50550 47600 111.111115 text
grestore
50900 48000 50600 48000 10 line
gsave
false false false false 208.000000 [(36) ] 0 50700 48050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD4\) PA4) ] 0 50550 48000 111.111115 text
grestore
50900 48400 50600 48400 10 line
gsave
false false false false 208.000000 [(37) ] 0 50700 48450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD3\) PA3) ] 0 50550 48400 111.111115 text
grestore
50900 48800 50600 48800 10 line
gsave
false false false false 208.000000 [(38) ] 0 50700 48850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD2\) PA2) ] 0 50550 48800 111.111115 text
grestore
50900 49200 50600 49200 10 line
gsave
false false false false 208.000000 [(39) ] 0 50700 49250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD1\) PA1) ] 0 50550 49200 111.111115 text
grestore
50900 49600 50600 49600 10 line
gsave
false false false false 208.000000 [(40) ] 0 50700 49650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD0\) PA0) ] 0 50550 49600 111.111115 text
grestore
48000 41600 50600 41600 10 line
50600 41600 50600 50000 10 line
50600 50000 48000 50000 10 line
48000 50000 48000 41600 10 line
gsave
false false false false 260.000000 [(ATmega16L) ] 0 48000 50050 138.888885 text
grestore
47700 46400 47900 46400 10 line
gsave
false true false false 208.000000 [(9) ] 0 47900 46450 111.111115 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 48050 46400 111.111115 text
grestore
47700 43200 48000 43200 10 line
gsave
false true false false 208.000000 [(17) ] 0 47900 43250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD3 \(INT1\)) ] 0 48050 43200 111.111115 text
grestore
47700 42800 48000 42800 10 line
gsave
false true false false 208.000000 [(18) ] 0 47900 42850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD4 \(OC1B\)) ] 0 48050 42800 111.111115 text
grestore
47700 42400 48000 42400 10 line
gsave
false true false false 208.000000 [(19) ] 0 47900 42450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD5 \(OC1A\)) ] 0 48050 42400 111.111115 text
grestore
47700 42000 48000 42000 10 line
gsave
false true false false 208.000000 [(20) ] 0 47900 42050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD6 \(ICP\)) ] 0 48050 42000 111.111115 text
grestore
50900 43200 50600 43200 10 line
gsave
false false false false 208.000000 [(24) ] 0 50700 43250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TCK\) PC2) ] 0 50550 43200 111.111115 text
grestore
50900 43600 50600 43600 10 line
gsave
false false false false 208.000000 [(25) ] 0 50700 43650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TMS\) PC3) ] 0 50550 43600 111.111115 text
grestore
50900 44000 50600 44000 10 line
gsave
false false false false 208.000000 [(26) ] 0 50700 44050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TDO\) PC4) ] 0 50550 44000 111.111115 text
grestore
50900 44400 50600 44400 10 line
gsave
false false false false 208.000000 [(27) ] 0 50700 44450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TDI\) PC5) ] 0 50550 44400 111.111115 text
grestore
50900 44800 50600 44800 10 line
gsave
false false false false 208.000000 [(28) ] 0 50700 44850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TOSC1\) PC6) ] 0 50550 44800 111.111115 text
grestore
50900 45200 50600 45200 10 line
gsave
false false false false 208.000000 [(29) ] 0 50700 45250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TOSC2\) PC7) ] 0 50550 45200 111.111115 text
grestore
50900 45600 50600 45600 10 line
gsave
false false false false 208.000000 [(30) ] 0 50700 45650 111.111115 text
grestore
gsave
false true false false 208.000000 [(AVCC) ] 0 50550 45600 111.111115 text
grestore
50900 46000 50600 46000 10 line
gsave
false false false false 208.000000 [(31) ] 0 50700 46050 111.111115 text
grestore
gsave
false true false false 208.000000 [(GND) ] 0 50550 46000 111.111115 text
grestore
50900 46400 50600 46400 10 line
gsave
false false false false 208.000000 [(32) ] 0 50700 46450 111.111115 text
grestore
gsave
false true false false 208.000000 [(AREF) ] 0 50550 46400 111.111115 text
grestore
47950 46400 50 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(PDIP40) ] 0 50600 50100 138.888885 text
grestore
gsave
42500 47800 42300 47800 10 line
gsave
false true false true 208.000000 [(1) ] 0 42150 47800 111.111115 text
grestore
42250 47800 50 0 360 10 darc
42500 48200 42300 48200 10 line
gsave
false true false true 208.000000 [(2) ] 0 42150 48200 111.111115 text
grestore
42250 48200 50 0 360 10 darc
42500 48600 42300 48600 10 line
gsave
false true false true 208.000000 [(3) ] 0 42150 48600 111.111115 text
grestore
42250 48600 50 0 360 10 darc
42500 49000 42300 49000 10 line
gsave
false true false true 208.000000 [(4) ] 0 42150 49000 111.111115 text
grestore
42250 49000 50 0 360 10 darc
42500 49400 42300 49400 10 line
gsave
false true false true 208.000000 [(5) ] 0 42150 49400 111.111115 text
grestore
42250 49400 50 0 360 10 darc
41800 47400 42200 47400 10 line
42200 47400 42200 49800 10 line
42200 49800 41800 49800 10 line
41800 49800 41800 47400 10 line
grestore
gsave
false false false true 260.000000 [(dapa socket) ] 0 41800 47300 138.888885 text
grestore
gsave
42900 46200 43100 46200 10 line
43100 46200 43100 46220 10 line
43100 46220 42900 46220 10 line
42900 46220 42900 46200 10 line
43000 46400 43000 46220 10 line
grestore
42500 47800 43000 47800 10 line
43000 47800 43000 46400 10 line
gsave
41660 50500 42000 50500 10 line
41560 50500 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(gamma) ] 0 41350 50450 138.888885 text
grestore
gsave
42900 50500 42750 50500 10 line
42000 50500 42152 50500 10 line
42150 50400 42750 50400 10 line
42750 50400 42750 50600 10 line
42750 50600 42150 50600 10 line
42150 50600 42150 50400 10 line
grestore
gsave
false false false false 260.000000 [(16k) ] 0 42200 50700 138.888885 text
grestore
42900 50500 43500 50500 10 line
43500 50500 43500 49400 10 line
42500 49400 47000 49400 10 line
47000 49400 47000 46400 10 line
47000 46400 47700 46400 10 line
42500 49000 46600 49000 10 line
46600 49000 46600 47200 10 line
46600 47200 47700 47200 10 line
42500 48600 46200 48600 10 line
46200 48600 46200 47600 10 line
46200 47600 47700 47600 10 line
42500 48200 45800 48200 10 line
45800 48200 45800 46800 10 line
45800 46800 47700 46800 10 line
newpath
43500 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
showpage
%%End
