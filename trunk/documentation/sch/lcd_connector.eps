%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 20081231
%%CreationDate: Thu Dec 10 03:34:45 2009
%%Title: /home/ivze/prog/aquarium/aquarium-avr-controller/sch/lcd_connector.sch
%%Author: ivze
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 260.000000 [(LCD connector) () ] 0 49500 40900 138.888885 text
grestore
gsave
false false false false 260.000000 [(WH0802A-YGH-CT) () ] 0 46400 47100 138.888885 text
grestore
gsave
52600 42700 52300 42700 10 line
gsave
false true false true 208.000000 [(2) ] 0 53750 42750 111.111115 text
grestore
52600 43300 52300 43300 10 line
gsave
false true false true 208.000000 [(4) ] 0 53750 43350 111.111115 text
grestore
52600 43900 52300 43900 10 line
gsave
false true false true 208.000000 [(6) ] 0 53750 43950 111.111115 text
grestore
52600 44500 52300 44500 10 line
gsave
false true false true 208.000000 [(8) ] 0 53750 44550 111.111115 text
grestore
52600 42400 52300 42400 10 line
gsave
false true false true 208.000000 [(1) ] 0 53750 42450 111.111115 text
grestore
52600 43000 52300 43000 10 line
gsave
false true false true 208.000000 [(3) ] 0 53750 43050 111.111115 text
grestore
52600 43600 52300 43600 10 line
gsave
false true false true 208.000000 [(5) ] 0 53750 43650 111.111115 text
grestore
52600 44200 52300 44200 10 line
gsave
false true false true 208.000000 [(7) ] 0 53750 44250 111.111115 text
grestore
52600 45100 52300 45100 10 line
gsave
false true false true 208.000000 [(10) ] 0 53750 45150 111.111115 text
grestore
52600 44800 52300 44800 10 line
gsave
false true false true 208.000000 [(9) ] 0 53750 44850 111.111115 text
grestore
52600 42400 53500 42400 10 line
52600 42700 53500 42700 10 line
52600 43000 53500 43000 10 line
52600 43300 53500 43300 10 line
52600 43600 53500 43600 10 line
52600 43900 53500 43900 10 line
52600 44200 53500 44200 10 line
52600 44500 53500 44500 10 line
52600 44800 53500 44800 10 line
52600 45100 53500 45100 10 line
53500 42200 54000 42200 10 line
54000 42200 54000 45300 10 line
54000 45300 53500 45300 10 line
53500 45300 53500 42200 10 line
grestore
gsave
false true false true 260.000000 [(LCD data plug) ] 0 53900 42100 138.888885 text
grestore
gsave
false false false false 260.000000 [(This end attached to main board.) ] 0 52400 45600 138.888885 text
grestore
gsave
52600 46900 52300 46900 10 line
gsave
false true false true 208.000000 [(2) ] 0 53650 46950 111.111115 text
grestore
52600 46600 52300 46600 10 line
gsave
false true false true 208.000000 [(1) ] 0 53650 46650 111.111115 text
grestore
52600 46600 53500 46600 10 line
52600 46900 53500 46900 10 line
53500 46400 54000 46400 10 line
54000 46400 54000 47100 10 line
54000 47100 53500 47100 10 line
53500 47100 53500 46400 10 line
grestore
gsave
false true false true 260.000000 [(LCD light plug) ] 0 54000 46300 138.888885 text
grestore
52300 46600 52000 46600 10 line
52300 42400 48700 42400 10 line
48700 42400 48700 41000 10 line
48700 41000 40600 41000 10 line
40600 41000 40600 49000 10 line
52300 42700 48400 42700 10 line
48400 42700 48400 41300 10 line
48400 41300 40900 41300 10 line
40900 41300 40900 49400 10 line
52300 43000 48100 43000 10 line
48100 43000 48100 41600 10 line
48100 41600 41200 41600 10 line
41200 41600 41200 49800 10 line
41500 41900 41500 50200 10 line
41500 41900 47800 41900 10 line
47800 41900 47800 43300 10 line
47800 43300 52300 43300 10 line
52300 43600 47500 43600 10 line
47500 43600 47500 42200 10 line
47500 42200 41800 42200 10 line
41800 42200 41800 46200 10 line
52300 43900 47200 43900 10 line
47200 43900 47200 42500 10 line
47200 42500 42100 42500 10 line
42100 42500 42100 46600 10 line
52300 44200 46900 44200 10 line
46900 44200 46900 42900 10 line
46900 42900 42400 42900 10 line
42400 42900 42400 47000 10 line
52300 44500 46000 44500 10 line
46000 44500 46000 43500 10 line
46000 43500 43000 43500 10 line
43000 43500 43000 45400 10 line
52300 44800 45800 44800 10 line
45800 44800 45800 43700 10 line
45800 43700 43200 43700 10 line
43200 43700 43200 45800 10 line
52300 45100 45300 45100 10 line
45300 45100 45300 44200 10 line
45300 44200 43500 44200 10 line
43500 44200 43500 45000 10 line
gsave
45300 45400 48600 45400 10 line
48600 45400 48600 50700 10 line
48600 50700 45300 50700 10 line
45300 50700 45300 45400 10 line
gsave
false false false true 208.000000 [(VSS \(GND\)) ] 0 45375 45900 111.111115 text
grestore
45300 45900 45000 45900 10 line
gsave
false false false true 208.000000 [(1) ] 0 45136 45850 111.111115 text
grestore
gsave
false false false true 208.000000 [(VDD \(VCC\)) ] 0 45375 46200 111.111115 text
grestore
45300 46200 45000 46200 10 line
gsave
false false false true 208.000000 [(2) ] 0 45096 46150 111.111115 text
grestore
gsave
false false false true 208.000000 [(V0) ] 0 45375 46500 111.111115 text
grestore
45300 46500 45000 46500 10 line
gsave
false false false true 208.000000 [(3) ] 0 45120 46450 111.111115 text
grestore
gsave
false false false true 208.000000 [(RS) ] 0 45375 46800 111.111115 text
grestore
45300 46800 45000 46800 10 line
gsave
false false false true 208.000000 [(4) ] 0 45096 46750 111.111115 text
grestore
gsave
false false false true 208.000000 [(R/W) ] 0 45375 47100 111.111115 text
grestore
45300 47100 45000 47100 10 line
gsave
false false false true 208.000000 [(5) ] 0 45120 47050 111.111115 text
grestore
gsave
false false false true 208.000000 [(E) ] 0 45375 47400 111.111115 text
grestore
45300 47400 45000 47400 10 line
gsave
false false false true 208.000000 [(6) ] 0 45104 47350 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB0) ] 0 45350 47700 111.111115 text
grestore
45300 47700 45000 47700 10 line
gsave
false false false true 208.000000 [(7) ] 0 45120 47650 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB1) ] 0 45350 48000 111.111115 text
grestore
45300 48000 45000 48000 10 line
gsave
false false false true 208.000000 [(8) ] 0 45112 47950 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB2) ] 0 45350 48300 111.111115 text
grestore
45300 48300 45000 48300 10 line
gsave
false false false true 208.000000 [(9) ] 0 45096 48250 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB3) ] 0 45350 48600 111.111115 text
grestore
45000 48600 45300 48600 10 line
gsave
false false false true 208.000000 [(10) ] 0 45100 48550 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB4) ] 0 45350 48900 111.111115 text
grestore
45000 48900 45300 48900 10 line
gsave
false false false true 208.000000 [(11) ] 0 45100 48850 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB5) ] 0 45350 49200 111.111115 text
grestore
45000 49200 45300 49200 10 line
gsave
false false false true 208.000000 [(12) ] 0 45100 49150 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB6) ] 0 45350 49500 111.111115 text
grestore
45000 49500 45300 49500 10 line
gsave
false false false true 208.000000 [(13) ] 0 45100 49450 111.111115 text
grestore
gsave
false false false true 208.000000 [(DB7) ] 0 45350 49800 111.111115 text
grestore
45000 49800 45300 49800 10 line
gsave
false false false true 208.000000 [(14) ] 0 45100 49750 111.111115 text
grestore
gsave
false false false true 208.000000 [(A ) ] 0 45350 50100 111.111115 text
grestore
45000 50100 45300 50100 10 line
gsave
false false false true 208.000000 [(15) ] 0 45100 50050 111.111115 text
grestore
gsave
false false false true 208.000000 [(K) ] 0 45350 50400 111.111115 text
grestore
45000 50400 45300 50400 10 line
gsave
false false false true 208.000000 [(16) ] 0 45100 50350 111.111115 text
grestore
46300 45700 48400 45700 10 line
48400 45700 48400 50500 10 line
48400 50500 46300 50500 10 line
46300 50500 46300 45700 10 line
45500 46950 45700 46950 10 line
gsave
false false false true 390.000000 [(LCD) ] 0 47100 47900 208.333328 text
grestore
grestore
41500 50200 44700 50200 10 line
44700 50200 44700 49800 10 line
44700 49800 45000 49800 10 line
41200 49800 44600 49800 10 line
44600 49800 44600 49500 10 line
44600 49500 45000 49500 10 line
40900 49400 44300 49400 10 line
44300 49400 44300 49200 10 line
44300 49200 45000 49200 10 line
40600 49000 44000 49000 10 line
44000 49000 44000 48900 10 line
44000 48900 45000 48900 10 line
43500 45000 45000 45000 10 line
45000 45000 45000 45900 10 line
43000 45400 44800 45400 10 line
44800 45400 44800 46200 10 line
44800 46200 45000 46200 10 line
43200 45800 44700 45800 10 line
44700 45800 44700 46500 10 line
44700 46500 45000 46500 10 line
41800 46200 44600 46200 10 line
44600 46200 44600 46800 10 line
44600 46800 45000 46800 10 line
42100 46600 44400 46600 10 line
44400 46600 44400 47100 10 line
44400 47100 45000 47100 10 line
42400 47000 44300 47000 10 line
44300 47000 44300 47400 10 line
44300 47400 45000 47400 10 line
52300 46900 52300 50900 10 line
52000 46600 52000 50800 10 line
44800 50900 52300 50900 10 line
44800 50900 44800 50100 10 line
44800 50100 45000 50100 10 line
45000 50800 52000 50800 10 line
45000 50800 45000 50400 10 line
gsave
false false false false 260.000000 [(1   2   3   4) ] 0 40500 47700 138.888885 text
grestore
gsave
false false false false 260.000000 [(5   6   7) ] 0 41900 45900 138.888885 text
grestore
gsave
false false false false 260.000000 [(8  9  10) ] 0 43100 44600 138.888885 text
grestore
showpage
%%End
