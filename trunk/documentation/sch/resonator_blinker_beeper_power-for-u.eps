%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 20081231
%%CreationDate: Tue Dec 15 16:45:36 2009
%%Title: /home/ivze/prog/aquarium/documentation/sch/resonator_blinker_beeper_power-for-u.sch
%%Author: ivze
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
46800 43800 47100 43800 10 line
gsave
false true false false 208.000000 [(16) ] 0 47000 43850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD2 \(INT0\)) ] 0 47150 43800 111.111115 text
grestore
47155 46765 47655 46765 10 line
46800 44200 47100 44200 10 line
gsave
false true false false 208.000000 [(15) ] 0 47000 44250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD1 \(TXD\)) ] 0 47150 44200 111.111115 text
grestore
46800 44600 47100 44600 10 line
gsave
false true false false 208.000000 [(14) ] 0 47000 44650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD0 \(RXD\)) ] 0 47150 44600 111.111115 text
grestore
46800 45000 47100 45000 10 line
gsave
false true false false 208.000000 [(13) ] 0 47000 45050 111.111115 text
grestore
gsave
false false false false 208.000000 [(XTAL1) ] 0 47150 45000 111.111115 text
grestore
46800 45400 47100 45400 10 line
gsave
false true false false 208.000000 [(12) ] 0 47000 45450 111.111115 text
grestore
gsave
false false false false 208.000000 [(XTAL2) ] 0 47150 45400 111.111115 text
grestore
46800 45800 47100 45800 10 line
gsave
false false false false 208.000000 [(GND) ] 0 47150 45800 111.111115 text
grestore
gsave
false false false false 260.000000 [(11) ] 0 46844 45809 138.888885 text
grestore
46800 46200 47100 46200 10 line
gsave
false true false false 208.000000 [(10) ] 0 47000 46250 111.111115 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 47150 46200 111.111115 text
grestore
46800 47000 47100 47000 10 line
gsave
false true false false 208.000000 [(8) ] 0 47000 47050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB7 \(SCK\)) ] 0 47150 47000 111.111115 text
grestore
46800 47400 47100 47400 10 line
gsave
false true false false 208.000000 [(7) ] 0 47000 47450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB6 \(MISO\)) ] 0 47150 47400 111.111115 text
grestore
46800 47800 47100 47800 10 line
gsave
false true false false 208.000000 [(6) ] 0 47000 47850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB5 \(MOSI\)) ] 0 47150 47800 111.111115 text
grestore
46800 48200 47100 48200 10 line
gsave
false true false false 208.000000 [(5) ] 0 47000 48250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB4 \(SS\)) ] 0 47150 48200 111.111115 text
grestore
47562 48324 47762 48324 10 line
46800 48600 47100 48600 10 line
gsave
false true false false 208.000000 [(4) ] 0 47000 48650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB3 \(OC0/AIN1\)) ] 0 47150 48600 111.111115 text
grestore
46800 49000 47100 49000 10 line
gsave
false true false false 208.000000 [(3) ] 0 47000 49050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB2 \(INT2/AIN0\)) ] 0 47150 49000 111.111115 text
grestore
46800 49400 47100 49400 10 line
gsave
false true false false 208.000000 [(2) ] 0 47000 49450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB1 \(T1\)) ] 0 47150 49400 111.111115 text
grestore
46800 49800 47100 49800 10 line
gsave
false true false false 208.000000 [(1) ] 0 47000 49850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB0 \(XCK/T0\)) ] 0 47150 49800 111.111115 text
grestore
50000 42200 49700 42200 10 line
gsave
false false false false 208.000000 [(21) ] 0 49800 42250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(OC2\) PD7) ] 0 49650 42200 111.111115 text
grestore
50000 42600 49700 42600 10 line
gsave
false false false false 208.000000 [(22) ] 0 49800 42650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SCL\) PC0) ] 0 49650 42600 111.111115 text
grestore
50000 43000 49700 43000 10 line
gsave
false false false false 208.000000 [(23) ] 0 49800 43050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SDA\) PC1) ] 0 49650 43000 111.111115 text
grestore
50000 47000 49700 47000 10 line
gsave
false false false false 208.000000 [(33) ] 0 49800 47050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD7\) PA7) ] 0 49650 47000 111.111115 text
grestore
50000 47400 49700 47400 10 line
gsave
false false false false 208.000000 [(34) ] 0 49800 47450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD6\) PA6) ] 0 49650 47400 111.111115 text
grestore
50000 47800 49700 47800 10 line
gsave
false false false false 208.000000 [(35) ] 0 49800 47850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD5\) PA5) ] 0 49650 47800 111.111115 text
grestore
50000 48200 49700 48200 10 line
gsave
false false false false 208.000000 [(36) ] 0 49800 48250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD4\) PA4) ] 0 49650 48200 111.111115 text
grestore
50000 48600 49700 48600 10 line
gsave
false false false false 208.000000 [(37) ] 0 49800 48650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD3\) PA3) ] 0 49650 48600 111.111115 text
grestore
50000 49000 49700 49000 10 line
gsave
false false false false 208.000000 [(38) ] 0 49800 49050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD2\) PA2) ] 0 49650 49000 111.111115 text
grestore
50000 49400 49700 49400 10 line
gsave
false false false false 208.000000 [(39) ] 0 49800 49450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD1\) PA1) ] 0 49650 49400 111.111115 text
grestore
50000 49800 49700 49800 10 line
gsave
false false false false 208.000000 [(40) ] 0 49800 49850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD0\) PA0) ] 0 49650 49800 111.111115 text
grestore
47100 41800 49700 41800 10 line
49700 41800 49700 50200 10 line
49700 50200 47100 50200 10 line
47100 50200 47100 41800 10 line
gsave
false false false false 260.000000 [(ATmega16L) ] 0 47100 50250 138.888885 text
grestore
46800 46600 47000 46600 10 line
gsave
false true false false 208.000000 [(9) ] 0 47000 46650 111.111115 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 47150 46600 111.111115 text
grestore
46800 43400 47100 43400 10 line
gsave
false true false false 208.000000 [(17) ] 0 47000 43450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD3 \(INT1\)) ] 0 47150 43400 111.111115 text
grestore
46800 43000 47100 43000 10 line
gsave
false true false false 208.000000 [(18) ] 0 47000 43050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD4 \(OC1B\)) ] 0 47150 43000 111.111115 text
grestore
46800 42600 47100 42600 10 line
gsave
false true false false 208.000000 [(19) ] 0 47000 42650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD5 \(OC1A\)) ] 0 47150 42600 111.111115 text
grestore
46800 42200 47100 42200 10 line
gsave
false true false false 208.000000 [(20) ] 0 47000 42250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD6 \(ICP\)) ] 0 47150 42200 111.111115 text
grestore
50000 43400 49700 43400 10 line
gsave
false false false false 208.000000 [(24) ] 0 49800 43450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TCK\) PC2) ] 0 49650 43400 111.111115 text
grestore
50000 43800 49700 43800 10 line
gsave
false false false false 208.000000 [(25) ] 0 49800 43850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TMS\) PC3) ] 0 49650 43800 111.111115 text
grestore
50000 44200 49700 44200 10 line
gsave
false false false false 208.000000 [(26) ] 0 49800 44250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TDO\) PC4) ] 0 49650 44200 111.111115 text
grestore
50000 44600 49700 44600 10 line
gsave
false false false false 208.000000 [(27) ] 0 49800 44650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TDI\) PC5) ] 0 49650 44600 111.111115 text
grestore
50000 45000 49700 45000 10 line
gsave
false false false false 208.000000 [(28) ] 0 49800 45050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TOSC1\) PC6) ] 0 49650 45000 111.111115 text
grestore
50000 45400 49700 45400 10 line
gsave
false false false false 208.000000 [(29) ] 0 49800 45450 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TOSC2\) PC7) ] 0 49650 45400 111.111115 text
grestore
50000 45800 49700 45800 10 line
gsave
false false false false 208.000000 [(30) ] 0 49800 45850 111.111115 text
grestore
gsave
false true false false 208.000000 [(AVCC) ] 0 49650 45800 111.111115 text
grestore
50000 46200 49700 46200 10 line
gsave
false false false false 208.000000 [(31) ] 0 49800 46250 111.111115 text
grestore
gsave
false true false false 208.000000 [(GND) ] 0 49650 46200 111.111115 text
grestore
50000 46600 49700 46600 10 line
gsave
false false false false 208.000000 [(32) ] 0 49800 46650 111.111115 text
grestore
gsave
false true false false 208.000000 [(AREF) ] 0 49650 46600 111.111115 text
grestore
47050 46600 50 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(PDIP40) ] 0 49700 50300 138.888885 text
grestore
gsave
false false false false 260.000000 [(Time resonator, beeper, LED blinker, microcontroller power supply) () ] 0 49500 40800 138.888885 text
grestore
gsave
42500 48700 42500 48500 10 line
gsave
false true false false 208.000000 [(1) ] 270 42550 48550 111.111115 text
grestore
42500 47700 42500 47900 10 line
gsave
false false false false 208.000000 [(2) ] 270 42550 47850 111.111115 text
grestore
42500 48200 300 0 360 10 darc
gsave
false false false false 208.000000 [(Beeper) ] 270 42455 48423 111.111115 text
grestore
grestore
gsave
false false false false 260.000000 [(U?) ] 270 42900 48400 138.888885 text
grestore
gsave
52200 45600 52700 45200 10 line
52700 45200 52600 45200 10 line
52700 45200 52700 45300 10 line
52000 45400 52200 45400 10 line
52900 45400 52700 45400 10 line
52400 45600 52400 45200 10 line
52500 45600 52500 45200 10 line
52700 45400 52500 45400 10 line
52400 45400 52200 45400 10 line
grestore
gsave
false false false false 260.000000 [(3-30 pf) ] 0 52200 45700 138.888885 text
grestore
gsave
50700 45400 50900 45400 10 line
51200 45400 51400 45400 10 line
50950 45300 51150 45300 10 line
51150 45300 51150 45500 10 line
51150 45500 50950 45500 10 line
50950 45500 50950 45300 10 line
50900 45540 50900 45260 10 line
51200 45540 51200 45260 10 line
grestore
gsave
false false false false 260.000000 [(32768 Hz) ] 0 50900 45600 138.888885 text
grestore
gsave
42500 47500 42500 47300 10 line
gsave
false true false false 156.000000 [(D) ] 0 42600 47350 83.333336 text
grestore
42500 46700 42500 46500 10 line
gsave
false true false false 156.000000 [(S) ] 0 42600 46550 83.333336 text
grestore
42600 47001 316 0 360 10 darc
42700 47200 42700 46800 10 line
43100 47000 42916 47000 10 line
gsave
false true false false 156.000000 [(G) ] 0 43000 47050 83.333336 text
grestore
42700 47000 42916 47000 10 line
42500 47300 42500 47140 10 line
42660 47200 42660 47080 10 line
42660 46800 42660 46920 10 line
42660 46940 42660 47060 10 line
42660 47140 42500 47140 10 line
42660 46860 42500 46860 10 line
42500 46700 42500 46860 10 line
42500 46860 42500 47000 10 line
42660 47000 42620 47020 10 line
42620 47020 42620 46980 10 line
42620 46980 42660 47000 10 line
42620 47000 42500 47000 10 line
42500 47200 42420 47200 10 line
42440 47030 42380 47030 10 line
42420 47200 42410 47200 10 line
42410 47080 42410 47200 10 line
42460 47010 42440 47030 10 line
42380 47030 42360 47050 10 line
42440 46970 42410 47030 10 line
42380 46970 42410 47030 10 line
42440 46970 42380 46970 10 line
42410 47030 42410 47080 10 line
42500 46800 42410 46800 10 line
42410 46800 42410 46970 10 line
42500 47200 5 0 360 10 darc
42500 47200 5 dot
42500 46860 5 0 360 10 darc
42500 46860 5 dot
42500 46800 5 0 360 10 darc
42500 46800 5 dot
grestore
gsave
false true false false 260.000000 [(2N7002) ] 0 42200 47000 138.888885 text
grestore
50000 45400 50700 45400 10 line
52900 45400 53000 45400 10 line
53000 45400 53000 45000 10 line
53000 45000 50000 45000 10 line
52000 45400 51400 45400 10 line
42500 47500 42500 47700 10 line
gsave
42400 45900 42600 45900 10 line
42600 45900 42600 45920 10 line
42600 45920 42400 45920 10 line
42400 45920 42400 45900 10 line
42500 46100 42500 45920 10 line
grestore
gsave
42500 49640 42500 49300 10 line
42500 49740 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(alpha) ] 270 42450 49950 138.888885 text
grestore
gsave
45600 49800 45450 49800 10 line
44700 49800 44852 49800 10 line
44850 49700 45450 49700 10 line
45450 49700 45450 49900 10 line
45450 49900 44850 49900 10 line
44850 49900 44850 49700 10 line
grestore
gsave
false false false false 260.000000 [(1k) ] 0 44900 50000 138.888885 text
grestore
46800 49800 45600 49800 10 line
44700 49800 44100 49800 10 line
44100 49800 44100 47000 10 line
43100 47000 44100 47000 10 line
42500 46100 42500 46500 10 line
gsave
54500 44000 54500 43800 10 line
gsave
false false false false 156.000000 [(D) ] 0 54400 43850 83.333336 text
grestore
54500 43200 54500 43000 10 line
gsave
false false false false 156.000000 [(S) ] 0 54400 43050 83.333336 text
grestore
54400 43501 316 0 360 10 darc
54300 43700 54300 43300 10 line
53900 43500 54084 43500 10 line
gsave
false false false false 156.000000 [(G) ] 0 54000 43550 83.333336 text
grestore
54300 43500 54084 43500 10 line
54500 43800 54500 43640 10 line
54340 43700 54340 43580 10 line
54340 43300 54340 43420 10 line
54340 43440 54340 43560 10 line
54340 43640 54500 43640 10 line
54340 43360 54500 43360 10 line
54500 43200 54500 43360 10 line
54500 43360 54500 43500 10 line
54340 43500 54380 43520 10 line
54380 43520 54380 43480 10 line
54380 43480 54340 43500 10 line
54380 43500 54500 43500 10 line
54500 43700 54580 43700 10 line
54560 43530 54620 43530 10 line
54580 43700 54590 43700 10 line
54590 43580 54590 43700 10 line
54540 43510 54560 43530 10 line
54620 43530 54640 43550 10 line
54560 43470 54590 43530 10 line
54620 43470 54590 43530 10 line
54560 43470 54620 43470 10 line
54590 43530 54590 43580 10 line
54500 43300 54590 43300 10 line
54590 43300 54590 43470 10 line
54500 43700 5 0 360 10 darc
54500 43700 5 dot
54500 43360 5 0 360 10 darc
54500 43360 5 dot
54500 43300 5 0 360 10 darc
54500 43300 5 dot
grestore
gsave
false false false false 260.000000 [(2N7002) ] 0 54800 43500 138.888885 text
grestore
gsave
52500 43500 52350 43500 10 line
51600 43500 51752 43500 10 line
51750 43400 52350 43400 10 line
52350 43400 52350 43600 10 line
52350 43600 51750 43600 10 line
51750 43600 51750 43400 10 line
grestore
gsave
false false false false 260.000000 [(1k) ] 0 51800 43700 138.888885 text
grestore
gsave
54400 41900 54600 41900 10 line
54600 41900 54600 41920 10 line
54600 41920 54400 41920 10 line
54400 41920 54400 41900 10 line
54500 42100 54500 41920 10 line
grestore
gsave
54500 47500 54500 47350 10 line
54500 46600 54500 46752 10 line
54400 46750 54600 46750 10 line
54600 46750 54600 47350 10 line
54600 47350 54400 47350 10 line
54400 47350 54400 46750 10 line
grestore
gsave
false false false false 260.000000 [(100) ] 90 54300 46800 138.888885 text
grestore
gsave
54500 48540 54500 48200 10 line
54500 48640 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(alpha) ] 270 54450 48850 138.888885 text
grestore
gsave
54500 45700 54500 45500 10 line
54500 44800 54500 45000 10 line
54600 45300 54500 45200 10 line
54500 45200 54400 45300 10 line
54600 45300 54400 45300 10 line
54600 45200 54400 45200 10 line
54500 45200 54500 45000 10 line
54500 45300 54500 45500 10 line
54640 45270 54740 45170 10 line
54740 45170 54710 45220 10 line
54740 45170 54690 45200 10 line
54640 45200 54740 45100 10 line
54740 45100 54710 45150 10 line
54740 45100 54690 45130 10 line
grestore
gsave
false false false false 260.000000 [(LED) ] 270 54700 44900 138.888885 text
grestore
54500 48200 54500 47500 10 line
54500 46600 54500 45700 10 line
54500 42100 54500 43000 10 line
54500 44000 54500 44800 10 line
53900 43500 52500 43500 10 line
51600 43500 50700 43500 10 line
50700 43500 50700 43400 10 line
50700 43400 50000 43400 10 line
gsave
45300 45700 45320 45700 10 line
45320 45700 45320 45900 10 line
45320 45900 45300 45900 10 line
45300 45900 45300 45700 10 line
45500 45800 45320 45800 10 line
grestore
gsave
45160 46200 45500 46200 10 line
45060 46200 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(gamma) ] 0 44850 46150 138.888885 text
grestore
gsave
51700 46940 51700 46600 10 line
51700 47040 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(gamma) ] 270 51650 47250 138.888885 text
grestore
gsave
50900 47080 51100 47080 10 line
51100 47080 51100 47100 10 line
51100 47100 50900 47100 10 line
50900 47100 50900 47080 10 line
51000 46900 51000 47080 10 line
grestore
46800 46200 45500 46200 10 line
46800 45800 45500 45800 10 line
51000 46900 51000 46200 10 line
51000 46200 50000 46200 10 line
51700 45800 51700 46600 10 line
51700 45800 50000 45800 10 line
42500 48700 42500 49300 10 line
gsave
false false false false 260.000000 [(22 pf) ] 0 52200 46600 138.888885 text
grestore
gsave
52000 46300 52200 46300 10 line
52900 46300 52700 46300 10 line
52400 46500 52400 46100 10 line
52500 46500 52500 46100 10 line
52700 46300 52500 46300 10 line
52400 46300 52200 46300 10 line
grestore
52000 46300 52000 45400 10 line
52900 46300 52900 45400 10 line
newpath
52900 45400
30
0 360 arc
fill
newpath
52000 45400
30
0 360 arc
fill
newpath
52000 45400
30
0 360 arc
fill
newpath
52900 45400
30
0 360 arc
fill
showpage
%%End
