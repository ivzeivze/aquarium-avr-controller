%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 20081231
%%CreationDate: Thu Dec 10 03:35:21 2009
%%Title: /home/ivze/prog/aquarium/aquarium-avr-controller/sch/power_system.sch
%%Author: ivze
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
42400 49100 42700 49100 10 line
gsave
false false false false 208.000000 [(2) ] 0 41350 49050 111.111115 text
grestore
42400 49400 42700 49400 10 line
gsave
false false false false 208.000000 [(1) ] 0 41350 49350 111.111115 text
grestore
42400 49400 41500 49400 10 line
42400 49100 41500 49100 10 line
41000 48900 41500 48900 10 line
41500 48900 41500 49600 10 line
41500 49600 41000 49600 10 line
41000 49600 41000 48900 10 line
newpath
42700 49400
30
0 360 arc
fill
newpath
42700 49400
30
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(conn1) ] 0 41000 49700 138.888885 text
grestore
gsave
42400 47100 42700 47100 10 line
gsave
false false false false 208.000000 [(2) ] 0 41350 47050 111.111115 text
grestore
42400 47400 42700 47400 10 line
gsave
false false false false 208.000000 [(1) ] 0 41350 47350 111.111115 text
grestore
42400 47400 41500 47400 10 line
42400 47100 41500 47100 10 line
41000 46900 41500 46900 10 line
41500 46900 41500 47600 10 line
41500 47600 41000 47600 10 line
41000 47600 41000 46900 10 line
grestore
gsave
false false false false 260.000000 [(conn2) ] 0 41000 47700 138.888885 text
grestore
gsave
false false false false 260.000000 [(+5V Adapter) ] 0 41600 49700 138.888885 text
grestore
gsave
false false false false 260.000000 [(+\(3.0 - 4.5\)V Zink-Carbon battery) () ] 0 41700 47400 138.888885 text
grestore
gsave
42600 48300 42800 48300 10 line
42800 48300 42800 48320 10 line
42800 48320 42600 48320 10 line
42600 48320 42600 48300 10 line
42700 48500 42700 48320 10 line
grestore
gsave
42600 46900 42800 46900 10 line
42800 46900 42800 46920 10 line
42800 46920 42600 46920 10 line
42600 46920 42600 46900 10 line
42700 47100 42700 46920 10 line
grestore
gsave
43500 48500 43500 48650 10 line
43500 49400 43500 49248 10 line
43400 48650 43600 48650 10 line
43600 48650 43600 49250 10 line
43600 49250 43400 49250 10 line
43400 49250 43400 48650 10 line
newpath
43500 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(220) ] 270 43700 49200 138.888885 text
grestore
gsave
43400 48300 43600 48300 10 line
43600 48300 43600 48320 10 line
43600 48320 43400 48320 10 line
43400 48320 43400 48300 10 line
43500 48500 43500 48320 10 line
grestore
42700 49100 42700 48500 10 line
43500 49300 43500 49400 10 line
42600 49400 53000 49400 10 line
gsave
47300 49740 47300 49400 10 line
47300 49840 100 0 360 10 darc
newpath
47300 49400
30
0 360 arc
fill
newpath
47300 49400
30
0 360 arc
fill
grestore
gsave
false true false false 260.000000 [(alpha) ] 270 47250 50050 138.888885 text
grestore
gsave
53200 49100 52800 49100 10 line
53200 49100 53000 48800 10 line
53000 48800 52800 49100 10 line
53200 48800 52800 48800 10 line
53000 49400 53000 49200 10 line
53000 48500 53000 48700 10 line
53000 48700 53000 48800 10 line
53000 49100 53000 49200 10 line
grestore
gsave
false false false false 260.000000 [(a strong diode) ] 90 52750 48850 138.888885 text
grestore
gsave
53500 48000 53700 48000 10 line
gsave
false true false false 208.000000 [(1) ] 0 53650 48050 111.111115 text
grestore
54400 48000 54200 48000 10 line
gsave
false false false false 208.000000 [(2) ] 0 54250 48050 111.111115 text
grestore
54050 48200 54050 47800 10 line
54200 48000 54050 48000 10 line
53850 48000 53700 48000 10 line
53739 48200 53739 48100 10 line
53790 48149 53690 48149 10 line
53850 47800 53950 47800 10 line
53950 47800 53950 48200 10 line
53950 48200 53850 48200 10 line
53850 48200 53850 47800 10 line
grestore
gsave
false false false false 260.000000 [(470u) ] 0 53700 48300 138.888885 text
grestore
gsave
54800 47800 55000 47800 10 line
55000 47800 55000 47820 10 line
55000 47820 54800 47820 10 line
54800 47820 54800 47800 10 line
54900 48000 54900 47820 10 line
grestore
gsave
53000 46860 53000 47200 10 line
53000 46760 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(delta) ] 90 53050 46550 138.888885 text
grestore
53000 47200 53000 48500 10 line
53000 48000 53500 48000 10 line
54400 48000 54900 48000 10 line
gsave
50600 48000 50200 48000 10 line
50600 48000 50400 47700 10 line
50400 47700 50200 48000 10 line
50600 47700 50200 47700 10 line
50400 48300 50400 48100 10 line
50400 47400 50400 47600 10 line
50400 47600 50400 47700 10 line
50400 48000 50400 48100 10 line
50600 47650 50 270 450 10 darc
50200 47750 50 90 270 10 darc
grestore
gsave
false false false false 260.000000 [(bat54) ] 270 50700 48000 138.888885 text
grestore
gsave
51800 48000 51400 48000 10 line
51800 48000 51600 47700 10 line
51600 47700 51400 48000 10 line
51800 47700 51400 47700 10 line
51600 48300 51600 48100 10 line
51600 47400 51600 47600 10 line
51600 47600 51600 47700 10 line
51600 48000 51600 48100 10 line
51800 47650 50 270 450 10 darc
51400 47750 50 90 270 10 darc
grestore
gsave
false false false false 260.000000 [(bat54) ] 270 51900 48000 138.888885 text
grestore
51000 48300 51000 49400 10 line
50400 48300 51600 48300 10 line
50400 47400 50400 47200 10 line
50400 47200 51600 47200 10 line
51600 47200 51600 47400 10 line
51000 47200 51000 46000 10 line
51000 46000 45500 46000 10 line
gsave
48500 46600 48500 46800 10 line
gsave
false true false false 208.000000 [(1) ] 90 48450 46750 111.111115 text
grestore
48500 47500 48500 47300 10 line
gsave
false false false false 208.000000 [(2) ] 90 48450 47350 111.111115 text
grestore
48300 47150 48700 47150 10 line
48500 47300 48500 47150 10 line
48500 46950 48500 46800 10 line
48300 46839 48400 46839 10 line
48351 46890 48351 46790 10 line
48300 46950 48700 46950 10 line
48700 46950 48700 47050 10 line
48700 47050 48300 47050 10 line
48300 47050 48300 46950 10 line
grestore
gsave
false false false false 260.000000 [(470u) ] 90 48200 46800 138.888885 text
grestore
gsave
48400 48180 48600 48180 10 line
48600 48180 48600 48200 10 line
48600 48200 48400 48200 10 line
48400 48200 48400 48180 10 line
48500 48000 48500 48180 10 line
grestore
48500 47500 48500 48000 10 line
48500 46600 48500 46000 10 line
gsave
45700 45700 45300 45700 10 line
45700 45700 45500 45400 10 line
45500 45400 45300 45700 10 line
45700 45400 45300 45400 10 line
45500 46000 45500 45800 10 line
45500 45100 45500 45300 10 line
45500 45300 45500 45400 10 line
45500 45700 45500 45800 10 line
45700 45350 50 270 450 10 darc
45300 45450 50 90 270 10 darc
grestore
gsave
false false false false 260.000000 [(bat54) ] 270 45800 45700 138.888885 text
grestore
gsave
44200 45700 43800 45700 10 line
44200 45700 44000 45400 10 line
44000 45400 43800 45700 10 line
44200 45400 43800 45400 10 line
44000 46000 44000 45800 10 line
44000 45100 44000 45300 10 line
44000 45300 44000 45400 10 line
44000 45700 44000 45800 10 line
44200 45350 50 270 450 10 darc
43800 45450 50 90 270 10 darc
grestore
gsave
false false false false 260.000000 [(bat54) ] 270 44300 45700 138.888885 text
grestore
42700 47400 44000 47400 10 line
44000 47400 44000 46000 10 line
44000 45100 44000 44600 10 line
44000 44600 45500 44600 10 line
45500 44600 45500 45100 10 line
gsave
47100 46340 47100 46000 10 line
47100 46440 100 0 360 10 darc
newpath
47100 46000
30
0 360 arc
fill
newpath
47100 46000
30
0 360 arc
fill
grestore
gsave
false true false false 260.000000 [(beta) ] 270 47050 46650 138.888885 text
grestore
44700 44600 44700 43000 10 line
44700 43000 53000 43000 10 line
53000 43000 53000 43500 10 line
gsave
53000 43840 53000 43500 10 line
53000 43940 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(gamma) ] 270 52950 44150 138.888885 text
grestore
gsave
51200 43400 51200 43600 10 line
gsave
false true false false 208.000000 [(1) ] 90 51150 43550 111.111115 text
grestore
51200 44300 51200 44100 10 line
gsave
false false false false 208.000000 [(2) ] 90 51150 44150 111.111115 text
grestore
51000 43950 51400 43950 10 line
51200 44100 51200 43950 10 line
51200 43750 51200 43600 10 line
51000 43639 51100 43639 10 line
51051 43690 51051 43590 10 line
51000 43750 51400 43750 10 line
51400 43750 51400 43850 10 line
51400 43850 51000 43850 10 line
51000 43850 51000 43750 10 line
grestore
gsave
false false false false 260.000000 [(1000u) ] 90 50900 43600 138.888885 text
grestore
gsave
51100 45080 51300 45080 10 line
51300 45080 51300 45100 10 line
51300 45100 51100 45100 10 line
51100 45100 51100 45080 10 line
51200 44900 51200 45080 10 line
grestore
51200 44300 51200 44900 10 line
51200 43000 51200 43400 10 line
gsave
false false false false 260.000000 [(Power system) ] 0 49600 41100 138.888885 text
grestore
gsave
false false false false 260.000000 [(alpha - raw power from Adapter) (beta - noise-protected power ) (gamma - noise and opwer-off protected power) (delta - relay power supply) () ] 0 46400 43900 138.888885 text
grestore
newpath
42700 49400
30
0 360 arc
fill
newpath
42700 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
60 60 43470 49270 fbox
newpath
43500 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
60 60 42570 49370 fbox
newpath
42700 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
newpath
43500 49400
30
0 360 arc
fill
newpath
47300 49400
30
0 360 arc
fill
newpath
51000 49400
30
0 360 arc
fill
newpath
47300 49400
30
0 360 arc
fill
newpath
47300 49400
30
0 360 arc
fill
newpath
53000 48000
30
0 360 arc
fill
newpath
53000 48000
30
0 360 arc
fill
newpath
53000 48000
30
0 360 arc
fill
newpath
51000 48300
30
0 360 arc
fill
newpath
51000 49400
30
0 360 arc
fill
newpath
51000 49400
30
0 360 arc
fill
newpath
51000 48300
30
0 360 arc
fill
newpath
51000 48300
30
0 360 arc
fill
newpath
51000 47200
30
0 360 arc
fill
newpath
51000 47200
30
0 360 arc
fill
newpath
51000 47200
30
0 360 arc
fill
newpath
48500 46000
30
0 360 arc
fill
newpath
47100 46000
30
0 360 arc
fill
newpath
48500 46000
30
0 360 arc
fill
newpath
48500 46000
30
0 360 arc
fill
newpath
44700 44600
30
0 360 arc
fill
newpath
47100 46000
30
0 360 arc
fill
newpath
47100 46000
30
0 360 arc
fill
newpath
44700 44600
30
0 360 arc
fill
newpath
44700 44600
30
0 360 arc
fill
newpath
51200 43000
30
0 360 arc
fill
newpath
51200 43000
30
0 360 arc
fill
newpath
51200 43000
30
0 360 arc
fill
showpage
%%End
