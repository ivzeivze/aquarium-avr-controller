%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 20081231
%%CreationDate: Thu Dec 10 03:35:06 2009
%%Title: /home/ivze/prog/aquarium/aquarium-avr-controller/sch/power-off_detector.sch
%%Author: ivze
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 260.000000 [(Power-off detector) () ] 0 49600 40900 138.888885 text
grestore
gsave
47900 43700 48200 43700 10 line
gsave
false true false false 208.000000 [(16) ] 0 48100 43750 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD2 \(INT0\)) ] 0 48250 43700 111.111115 text
grestore
48255 46665 48755 46665 10 line
47900 44100 48200 44100 10 line
gsave
false true false false 208.000000 [(15) ] 0 48100 44150 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD1 \(TXD\)) ] 0 48250 44100 111.111115 text
grestore
47900 44500 48200 44500 10 line
gsave
false true false false 208.000000 [(14) ] 0 48100 44550 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD0 \(RXD\)) ] 0 48250 44500 111.111115 text
grestore
47900 44900 48200 44900 10 line
gsave
false true false false 208.000000 [(13) ] 0 48100 44950 111.111115 text
grestore
gsave
false false false false 208.000000 [(XTAL1) ] 0 48250 44900 111.111115 text
grestore
47900 45300 48200 45300 10 line
gsave
false true false false 208.000000 [(12) ] 0 48100 45350 111.111115 text
grestore
gsave
false false false false 208.000000 [(XTAL2) ] 0 48250 45300 111.111115 text
grestore
47900 45700 48200 45700 10 line
gsave
false false false false 208.000000 [(GND) ] 0 48250 45700 111.111115 text
grestore
gsave
false false false false 260.000000 [(11) ] 0 47944 45709 138.888885 text
grestore
47900 46100 48200 46100 10 line
gsave
false true false false 208.000000 [(10) ] 0 48100 46150 111.111115 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 48250 46100 111.111115 text
grestore
47900 46900 48200 46900 10 line
gsave
false true false false 208.000000 [(8) ] 0 48100 46950 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB7 \(SCK\)) ] 0 48250 46900 111.111115 text
grestore
47900 47300 48200 47300 10 line
gsave
false true false false 208.000000 [(7) ] 0 48100 47350 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB6 \(MISO\)) ] 0 48250 47300 111.111115 text
grestore
47900 47700 48200 47700 10 line
gsave
false true false false 208.000000 [(6) ] 0 48100 47750 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB5 \(MOSI\)) ] 0 48250 47700 111.111115 text
grestore
47900 48100 48200 48100 10 line
gsave
false true false false 208.000000 [(5) ] 0 48100 48150 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB4 \(SS\)) ] 0 48250 48100 111.111115 text
grestore
48662 48224 48862 48224 10 line
47900 48500 48200 48500 10 line
gsave
false true false false 208.000000 [(4) ] 0 48100 48550 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB3 \(OC0/AIN1\)) ] 0 48250 48500 111.111115 text
grestore
47900 48900 48200 48900 10 line
gsave
false true false false 208.000000 [(3) ] 0 48100 48950 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB2 \(INT2/AIN0\)) ] 0 48250 48900 111.111115 text
grestore
47900 49300 48200 49300 10 line
gsave
false true false false 208.000000 [(2) ] 0 48100 49350 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB1 \(T1\)) ] 0 48250 49300 111.111115 text
grestore
47900 49700 48200 49700 10 line
gsave
false true false false 208.000000 [(1) ] 0 48100 49750 111.111115 text
grestore
gsave
false false false false 208.000000 [(PB0 \(XCK/T0\)) ] 0 48250 49700 111.111115 text
grestore
51100 42100 50800 42100 10 line
gsave
false false false false 208.000000 [(21) ] 0 50900 42150 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(OC2\) PD7) ] 0 50750 42100 111.111115 text
grestore
51100 42500 50800 42500 10 line
gsave
false false false false 208.000000 [(22) ] 0 50900 42550 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SCL\) PC0) ] 0 50750 42500 111.111115 text
grestore
51100 42900 50800 42900 10 line
gsave
false false false false 208.000000 [(23) ] 0 50900 42950 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SDA\) PC1) ] 0 50750 42900 111.111115 text
grestore
51100 46900 50800 46900 10 line
gsave
false false false false 208.000000 [(33) ] 0 50900 46950 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD7\) PA7) ] 0 50750 46900 111.111115 text
grestore
51100 47300 50800 47300 10 line
gsave
false false false false 208.000000 [(34) ] 0 50900 47350 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD6\) PA6) ] 0 50750 47300 111.111115 text
grestore
51100 47700 50800 47700 10 line
gsave
false false false false 208.000000 [(35) ] 0 50900 47750 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD5\) PA5) ] 0 50750 47700 111.111115 text
grestore
51100 48100 50800 48100 10 line
gsave
false false false false 208.000000 [(36) ] 0 50900 48150 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD4\) PA4) ] 0 50750 48100 111.111115 text
grestore
51100 48500 50800 48500 10 line
gsave
false false false false 208.000000 [(37) ] 0 50900 48550 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD3\) PA3) ] 0 50750 48500 111.111115 text
grestore
51100 48900 50800 48900 10 line
gsave
false false false false 208.000000 [(38) ] 0 50900 48950 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD2\) PA2) ] 0 50750 48900 111.111115 text
grestore
51100 49300 50800 49300 10 line
gsave
false false false false 208.000000 [(39) ] 0 50900 49350 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD1\) PA1) ] 0 50750 49300 111.111115 text
grestore
51100 49700 50800 49700 10 line
gsave
false false false false 208.000000 [(40) ] 0 50900 49750 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AD0\) PA0) ] 0 50750 49700 111.111115 text
grestore
48200 41700 50800 41700 10 line
50800 41700 50800 50100 10 line
50800 50100 48200 50100 10 line
48200 50100 48200 41700 10 line
gsave
false false false false 260.000000 [(ATmega16L) ] 0 48200 50150 138.888885 text
grestore
47900 46500 48100 46500 10 line
gsave
false true false false 208.000000 [(9) ] 0 48100 46550 111.111115 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 48250 46500 111.111115 text
grestore
47900 43300 48200 43300 10 line
gsave
false true false false 208.000000 [(17) ] 0 48100 43350 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD3 \(INT1\)) ] 0 48250 43300 111.111115 text
grestore
47900 42900 48200 42900 10 line
gsave
false true false false 208.000000 [(18) ] 0 48100 42950 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD4 \(OC1B\)) ] 0 48250 42900 111.111115 text
grestore
47900 42500 48200 42500 10 line
gsave
false true false false 208.000000 [(19) ] 0 48100 42550 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD5 \(OC1A\)) ] 0 48250 42500 111.111115 text
grestore
47900 42100 48200 42100 10 line
gsave
false true false false 208.000000 [(20) ] 0 48100 42150 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD6 \(ICP\)) ] 0 48250 42100 111.111115 text
grestore
51100 43300 50800 43300 10 line
gsave
false false false false 208.000000 [(24) ] 0 50900 43350 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TCK\) PC2) ] 0 50750 43300 111.111115 text
grestore
51100 43700 50800 43700 10 line
gsave
false false false false 208.000000 [(25) ] 0 50900 43750 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TMS\) PC3) ] 0 50750 43700 111.111115 text
grestore
51100 44100 50800 44100 10 line
gsave
false false false false 208.000000 [(26) ] 0 50900 44150 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TDO\) PC4) ] 0 50750 44100 111.111115 text
grestore
51100 44500 50800 44500 10 line
gsave
false false false false 208.000000 [(27) ] 0 50900 44550 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TDI\) PC5) ] 0 50750 44500 111.111115 text
grestore
51100 44900 50800 44900 10 line
gsave
false false false false 208.000000 [(28) ] 0 50900 44950 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TOSC1\) PC6) ] 0 50750 44900 111.111115 text
grestore
51100 45300 50800 45300 10 line
gsave
false false false false 208.000000 [(29) ] 0 50900 45350 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(TOSC2\) PC7) ] 0 50750 45300 111.111115 text
grestore
51100 45700 50800 45700 10 line
gsave
false false false false 208.000000 [(30) ] 0 50900 45750 111.111115 text
grestore
gsave
false true false false 208.000000 [(AVCC) ] 0 50750 45700 111.111115 text
grestore
51100 46100 50800 46100 10 line
gsave
false false false false 208.000000 [(31) ] 0 50900 46150 111.111115 text
grestore
gsave
false true false false 208.000000 [(GND) ] 0 50750 46100 111.111115 text
grestore
51100 46500 50800 46500 10 line
gsave
false false false false 208.000000 [(32) ] 0 50900 46550 111.111115 text
grestore
gsave
false true false false 208.000000 [(AREF) ] 0 50750 46500 111.111115 text
grestore
48150 46500 50 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(PDIP40) ] 0 50800 50200 138.888885 text
grestore
gsave
43400 43700 43400 43500 10 line
gsave
false false false false 156.000000 [(D) ] 0 43300 43550 83.333336 text
grestore
43400 42900 43400 42700 10 line
gsave
false false false false 156.000000 [(S) ] 0 43300 42750 83.333336 text
grestore
43300 43201 316 0 360 10 darc
43200 43400 43200 43000 10 line
42800 43200 42984 43200 10 line
gsave
false false false false 156.000000 [(G) ] 0 42900 43250 83.333336 text
grestore
43200 43200 42984 43200 10 line
43400 43500 43400 43340 10 line
43240 43400 43240 43280 10 line
43240 43000 43240 43120 10 line
43240 43140 43240 43260 10 line
43240 43340 43400 43340 10 line
43240 43060 43400 43060 10 line
43400 42900 43400 43060 10 line
43400 43060 43400 43200 10 line
43240 43200 43280 43220 10 line
43280 43220 43280 43180 10 line
43280 43180 43240 43200 10 line
43280 43200 43400 43200 10 line
43400 43400 43480 43400 10 line
43460 43230 43520 43230 10 line
43480 43400 43490 43400 10 line
43490 43280 43490 43400 10 line
43440 43210 43460 43230 10 line
43520 43230 43540 43250 10 line
43460 43170 43490 43230 10 line
43520 43170 43490 43230 10 line
43460 43170 43520 43170 10 line
43490 43230 43490 43280 10 line
43400 43000 43490 43000 10 line
43490 43000 43490 43170 10 line
43400 43400 5 0 360 10 darc
43400 43400 5 dot
43400 43060 5 0 360 10 darc
43400 43060 5 dot
43400 43000 5 0 360 10 darc
43400 43000 5 dot
grestore
gsave
false false false false 260.000000 [(2N7002) ] 0 43700 43200 138.888885 text
grestore
gsave
43300 41500 43500 41500 10 line
43500 41500 43500 41520 10 line
43500 41520 43300 41520 10 line
43300 41520 43300 41500 10 line
43400 41700 43400 41520 10 line
grestore
gsave
41700 42900 41700 42700 10 line
gsave
false true false false 208.000000 [(1) ] 270 41750 42750 111.111115 text
grestore
41700 42000 41700 42200 10 line
gsave
false false false false 208.000000 [(2) ] 270 41750 42150 111.111115 text
grestore
41900 42350 41500 42350 10 line
41700 42200 41700 42350 10 line
41700 42550 41700 42700 10 line
41900 42661 41800 42661 10 line
41849 42610 41849 42710 10 line
41500 42450 41900 42450 10 line
41900 42450 41900 42550 10 line
41900 42550 41500 42550 10 line
41500 42550 41500 42450 10 line
grestore
gsave
false false false false 260.000000 [(10u) ] 270 42000 42700 138.888885 text
grestore
gsave
41600 41500 41800 41500 10 line
41800 41500 41800 41520 10 line
41800 41520 41600 41520 10 line
41600 41520 41600 41500 10 line
41700 41700 41700 41520 10 line
grestore
gsave
41700 44800 41700 44650 10 line
41700 43900 41700 44052 10 line
41600 44050 41800 44050 10 line
41800 44050 41800 44650 10 line
41800 44650 41600 44650 10 line
41600 44650 41600 44050 10 line
grestore
gsave
false false false false 260.000000 [(8k) ] 90 41500 44100 138.888885 text
grestore
gsave
46000 44500 45850 44500 10 line
45100 44500 45252 44500 10 line
45250 44400 45850 44400 10 line
45850 44400 45850 44600 10 line
45850 44600 45250 44600 10 line
45250 44600 45250 44400 10 line
grestore
gsave
false false false false 260.000000 [(11k) ] 0 45300 44700 138.888885 text
grestore
gsave
46000 44000 45850 44000 10 line
45100 44000 45252 44000 10 line
45250 43900 45850 43900 10 line
45850 43900 45850 44100 10 line
45850 44100 45250 44100 10 line
45250 44100 45250 43900 10 line
grestore
gsave
false false false false 260.000000 [(11k) ] 0 45300 44200 138.888885 text
grestore
41700 42000 41700 41700 10 line
42800 43200 41700 43200 10 line
41700 42900 41700 43900 10 line
43400 41700 43400 42700 10 line
45100 44000 43400 44000 10 line
43400 43700 43400 44500 10 line
43400 44500 45100 44500 10 line
gsave
41700 46740 41700 46400 10 line
41700 46840 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(alpha) ] 270 41650 47050 138.888885 text
grestore
41700 44800 41700 46400 10 line
47900 44500 46000 44500 10 line
47900 44100 46000 44100 10 line
46000 44100 46000 44000 10 line
newpath
41700 43200
30
0 360 arc
fill
newpath
41700 43200
30
0 360 arc
fill
newpath
41700 43200
30
0 360 arc
fill
newpath
43400 44000
30
0 360 arc
fill
newpath
43400 44000
30
0 360 arc
fill
newpath
43400 44000
30
0 360 arc
fill
showpage
%%End
