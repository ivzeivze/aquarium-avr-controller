%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 20081231
%%CreationDate: Thu Dec 10 03:34:16 2009
%%Title: /home/ivze/prog/aquarium/aquarium-avr-controller/sch/dapa.sch
%%Author: ivze
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 111.111115 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 111.111115 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 111.111115 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 260.000000 [(DAPA LPT port programmator) ] 0 49500 41100 138.888885 text
grestore
gsave
54250 49190 150 0 110 10 darc
53575 49000 75 120 180 10 darc
54100 44200 50 0 360 10 darc
54150 44200 54700 44200 10 line
gsave
false false false false 208.000000 [(13) ] 0 54500 44250 111.111115 text
grestore
gsave
false false false false 104.000000 [(SLCT) ] 0 54000 44050 55.555557 text
grestore
53800 44400 50 0 360 10 darc
54100 44600 50 0 360 10 darc
54150 44600 54700 44600 10 line
gsave
false false false false 208.000000 [(12) ] 0 54500 44650 111.111115 text
grestore
gsave
false false false false 104.000000 [(PE) ] 0 54000 44450 55.555557 text
grestore
53800 44800 50 0 360 10 darc
54100 45000 50 0 360 10 darc
54150 45000 54700 45000 10 line
gsave
false false false false 208.000000 [(11) ] 0 54500 45050 111.111115 text
grestore
gsave
false false false false 104.000000 [(BUSY) ] 0 54000 44850 55.555557 text
grestore
53800 45200 50 0 360 10 darc
54100 45400 50 0 360 10 darc
54150 45400 54700 45400 10 line
gsave
false false false false 208.000000 [(10) ] 0 54500 45450 111.111115 text
grestore
gsave
false false false false 104.000000 [(/ACK) ] 0 54000 45250 55.555557 text
grestore
53800 45600 50 0 360 10 darc
54100 45800 50 0 360 10 darc
54150 45800 54700 45800 10 line
gsave
false false false false 208.000000 [(9) ] 0 54500 45850 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA7) ] 0 54000 45650 55.555557 text
grestore
53800 46000 50 0 360 10 darc
54100 46200 50 0 360 10 darc
54150 46200 54700 46200 10 line
gsave
false false false false 208.000000 [(8) ] 0 54500 46250 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA6) ] 0 54000 46050 55.555557 text
grestore
53800 46400 50 0 360 10 darc
54100 46600 50 0 360 10 darc
54150 46600 54700 46600 10 line
gsave
false false false false 208.000000 [(7) ] 0 54500 46650 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA5) ] 0 54000 46450 55.555557 text
grestore
53800 46800 50 0 360 10 darc
54100 47000 50 0 360 10 darc
54150 47000 54700 47000 10 line
gsave
false false false false 208.000000 [(6) ] 0 54500 47050 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA4) ] 0 54000 46850 55.555557 text
grestore
53800 47200 50 0 360 10 darc
54100 47400 50 0 360 10 darc
54150 47400 54700 47400 10 line
gsave
false false false false 208.000000 [(5) ] 0 54500 47450 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA3) ] 0 54000 47250 55.555557 text
grestore
53800 47600 50 0 360 10 darc
54100 47800 50 0 360 10 darc
54150 47800 54700 47800 10 line
gsave
false false false false 208.000000 [(4) ] 0 54500 47850 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA2) ] 0 54000 47650 55.555557 text
grestore
53800 48000 50 0 360 10 darc
54100 48200 50 0 360 10 darc
54150 48200 54700 48200 10 line
gsave
false false false false 208.000000 [(3) ] 0 54500 48250 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA1) ] 0 54000 48050 55.555557 text
grestore
53800 48400 50 0 360 10 darc
54100 48600 50 0 360 10 darc
54150 48600 54700 48600 10 line
gsave
false false false false 208.000000 [(2) ] 0 54500 48650 111.111115 text
grestore
gsave
false false false false 104.000000 [(DATA0) ] 0 54000 48450 55.555557 text
grestore
53800 48800 50 0 360 10 darc
54100 49000 50 0 360 10 darc
54150 49000 54700 49000 10 line
gsave
false false false false 208.000000 [(1) ] 0 54500 49050 111.111115 text
grestore
gsave
false false false false 104.000000 [(/STROBE) ] 0 54000 48850 55.555557 text
grestore
54201 49332 53538 49066 10 line
53750 44400 53200 44400 10 line
gsave
false false false false 208.000000 [(25) ] 0 53250 44450 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 44250 55.555557 text
grestore
53750 45200 53200 45200 10 line
gsave
false false false false 208.000000 [(23) ] 0 53250 45250 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 45050 55.555557 text
grestore
53750 44800 53200 44800 10 line
gsave
false false false false 208.000000 [(24) ] 0 53250 44850 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 44650 55.555557 text
grestore
53750 45600 53200 45600 10 line
gsave
false false false false 208.000000 [(22) ] 0 53250 45650 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 45450 55.555557 text
grestore
53750 46000 53200 46000 10 line
gsave
false false false false 208.000000 [(21) ] 0 53250 46050 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 45850 55.555557 text
grestore
53750 46400 53200 46400 10 line
gsave
false false false false 208.000000 [(20) ] 0 53250 46450 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 46250 55.555557 text
grestore
53750 46800 53200 46800 10 line
gsave
false false false false 208.000000 [(19) ] 0 53250 46850 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 46650 55.555557 text
grestore
53750 47200 53200 47200 10 line
gsave
false false false false 208.000000 [(18) ] 0 53250 47250 111.111115 text
grestore
gsave
false false false false 104.000000 [(GND) ] 0 53750 47050 55.555557 text
grestore
53750 47600 53200 47600 10 line
gsave
false false false false 208.000000 [(17) ] 0 53250 47650 111.111115 text
grestore
gsave
false false false false 104.000000 [(/SLCTIN) ] 0 53600 47450 55.555557 text
grestore
53750 48000 53200 48000 10 line
gsave
false false false false 208.000000 [(16) ] 0 53250 48050 111.111115 text
grestore
gsave
false false false false 104.000000 [(/INIT) ] 0 53750 47850 55.555557 text
grestore
53750 48400 53200 48400 10 line
gsave
false false false false 208.000000 [(15) ] 0 53250 48450 111.111115 text
grestore
gsave
false false false false 104.000000 [(/ERROR) ] 0 53600 48250 55.555557 text
grestore
53750 48800 53200 48800 10 line
gsave
false false false false 208.000000 [(14) ] 0 53250 48850 111.111115 text
grestore
gsave
false false false false 104.000000 [(/AUTOF) ] 0 53600 48650 55.555557 text
grestore
54250 43950 150 250 360 10 darc
53575 44100 75 180 240 10 darc
53539 44034 54203 43808 10 line
54400 43950 54400 49190 10 line
53500 49000 53500 44100 10 line
grestore
gsave
false false false false 260.000000 [(LPT port plug) ] 0 53600 49500 138.888885 text
grestore
gsave
43500 46300 43800 46300 10 line
gsave
false false false false 208.000000 [(2) ] 0 42350 46250 111.111115 text
grestore
43500 45700 43800 45700 10 line
gsave
false false false false 208.000000 [(4) ] 0 42350 45650 111.111115 text
grestore
43500 46600 43800 46600 10 line
gsave
false false false false 208.000000 [(1) ] 0 42350 46550 111.111115 text
grestore
43500 46000 43800 46000 10 line
gsave
false false false false 208.000000 [(3) ] 0 42350 45950 111.111115 text
grestore
43500 45400 43800 45400 10 line
gsave
false false false false 208.000000 [(5) ] 0 42350 45350 111.111115 text
grestore
43500 46600 42600 46600 10 line
43500 46300 42600 46300 10 line
43500 46000 42600 46000 10 line
43500 45700 42600 45700 10 line
43500 45400 42600 45400 10 line
42100 45200 42600 45200 10 line
42600 45200 42600 46800 10 line
42600 46800 42100 46800 10 line
42100 46800 42100 45200 10 line
grestore
gsave
false false false false 260.000000 [(Programmator plug) ] 0 42200 46900 138.888885 text
grestore
53200 46400 51700 46400 10 line
51700 46000 53200 46000 10 line
43800 46600 51700 46600 10 line
51700 46000 51700 46600 10 line
gsave
51600 45800 51800 45800 10 line
51800 45800 51800 45820 10 line
51800 45820 51600 45820 10 line
51600 45820 51600 45800 10 line
51700 46000 51700 45820 10 line
grestore
54700 49000 55000 49000 10 line
55000 49000 55000 50000 10 line
55000 50000 51000 50000 10 line
51000 50000 51000 49000 10 line
gsave
51000 49000 51000 48850 10 line
51000 48100 51000 48252 10 line
50900 48250 51100 48250 10 line
51100 48250 51100 48850 10 line
51100 48850 50900 48850 10 line
50900 48850 50900 48250 10 line
grestore
gsave
false false false false 260.000000 [(1k) ] 90 50800 48300 138.888885 text
grestore
gsave
50000 49000 50000 48850 10 line
50000 48100 50000 48252 10 line
49900 48250 50100 48250 10 line
50100 48250 50100 48850 10 line
50100 48850 49900 48850 10 line
49900 48850 49900 48250 10 line
grestore
gsave
false false false false 260.000000 [(1k) ] 90 49800 48300 138.888885 text
grestore
51000 48100 51000 46300 10 line
51000 46300 43800 46300 10 line
43800 46000 50000 46000 10 line
50000 46000 50000 48100 10 line
50000 49000 50000 50500 10 line
50000 50500 55500 50500 10 line
55500 50500 55500 48600 10 line
55500 48600 54700 48600 10 line
54700 45000 55500 45000 10 line
55500 45000 55500 43000 10 line
55500 43000 50500 43000 10 line
50500 43000 50500 45700 10 line
50500 45700 43800 45700 10 line
53200 48000 52600 48000 10 line
52600 48000 52600 45400 10 line
52600 45400 43800 45400 10 line
newpath
51700 46400
30
0 360 arc
fill
newpath
51700 46400
30
0 360 arc
fill
newpath
51700 46000
30
0 360 arc
fill
newpath
51700 46000
30
0 360 arc
fill
newpath
51700 46400
30
0 360 arc
fill
showpage
%%End
